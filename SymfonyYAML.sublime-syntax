%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - services.yaml
scope: source.yaml.symfony
version: 2
extends: Packages/YAML/YAML.sublime-syntax

contexts:
  flow-scalar-single-quoted-body:
    - meta_append: true
    - match: (%)(env)(\()(default::|string:)?(\w+)(\))(%)
      captures:
        1: punctuation.definition.variable.begin.symfony
        2: variable.language.symfony
        3: punctuation.definition.variable.begin.symfony
        4: variable.language.symfony
        5: constant.other.placeholder.symfony
        6: punctuation.definition.variable.end.symfony
        7: punctuation.definition.variable.end.symfony
    - match: (%)([a-z._-]+)(%)
      captures:
        1: punctuation.definition.variable.begin.symfony
        2: variable.language.symfony
        3: punctuation.definition.variable.end.symfony
    - match: '@@'
      scope: constant.character.escape.symfony
    - match: (@)[a-z][a-zA-Z_-]+(?:\.[a-z_-]+)*\b
      scope: variable.function.symfony
      captures:
        1: punctuation.definition.variable.symfony
    - match: (@)[A-Z]\w*(?=\\)
      scope: variable.namespace.php.symfony
      captures:
        1: punctuation.definition.variable.symfony
      push:
        - scope:source.php#class-name
    - match: \w+@\w+ # eat email addresses so they don't scope as references

  property-body:
    - meta_prepend: true
    - match: '!php/(?:const|enum)(?=\ |\t|$)'
      scope: storage.type.tag-handle.yaml
      embed: scope:source.php#single-expression
      escape: '{{_flow_scalar_end_plain_out}}'
      pop: 1

  flow-scalar-plain-out-body:
    - meta_prepend: true
    - match: (env)(\()(default::|string:)?(\w+)(\))
      captures:
        1: variable.language.symfony
        2: punctuation.definition.variable.begin.symfony
        3: variable.language.symfony
        4: constant.other.placeholder.symfony
        5: punctuation.definition.variable.end.symfony
    - match: (?=(?:\w+\\)*\w+\s+\$\w+)
      push: scope:source.php#single-expression
    - match: (\$)(\w+)
      captures:
        1: punctuation.definition.variable.symfony
        2: variable.other.symfony
    - match: (?=[A-Z]\w*\\)
      push: scope:source.php#class-name

  block-key-implicit:
    - meta_prepend: true
    - match: (class)(:)
      captures:
        1: meta.mapping.key.yaml meta.string.yaml string.unquoted.plain.out.yaml
        2: meta.mapping.yaml punctuation.separator.key-value.mapping.yaml
      set:
        - scope:source.php#class-name
    - match: (namespace)(:)
      captures:
        1: meta.mapping.key.yaml meta.string.yaml string.unquoted.plain.out.yaml
        2: meta.mapping.yaml punctuation.separator.key-value.mapping.yaml
      set:
        - scope:source.php#class-name
    - match: \b(when)(@)(\w+)(?=:)
      scope: meta.mapping.key.yaml meta.string.yaml string.unquoted.plain.out.yaml
      captures:
        1: keyword.control.conditional.if.symfony
        2: punctuation.separator.key-value.symfony
        3: constant.language.symfony

  flow-pair-key:
    - meta_prepend: true
    - match: (class)(:)\s*(')
      captures:
        1: meta.string.yaml string.unquoted.plain.in.yaml
        2: punctuation.separator.key-value.mapping.yaml
        3: meta.string.yaml string.quoted.single.yaml punctuation.definition.string.begin.yaml
      embed: scope:source.php#class-name
      escape: (')
      escape_captures:
        1: meta.string.yaml string.quoted.single.yaml punctuation.definition.string.end.yaml
      pop: 1
